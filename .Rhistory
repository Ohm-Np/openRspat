date = tmin$date,
tmin = tmin$tmin,
tmax = tmax$tmax)
View(new.df)
View(tmin)
View(tmax)
new.df$tmean <- (tmin$tmin + tmax$tmax)/2
View(new.df)
write.csv(new.df,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/tmax_tmin_tmean_supportedPAs.csv"),
row.names = F)
new.df$tmin <- NULL
new.df$tmax <- NULL
head(new.df)
longdf <- pivot_longer(new.df,
cols=tmean)
View(longdf)
write.csv(longdf,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/tmean_supportedPAs_long.csv"),
row.names = F)
tempdir()
unlink("/tmp/Rtmp3BU1fp/*png")
tempdir()
pa_polygon <-
read_sf("../../datalake/mapme.protectedareas/input/wdpa_kfw/wdpa_kfw_spatial_latinamerica_2021-04-22_allPAs_valid.gpkg")
library(sf)
library(terra)
library(exactextractr)
library(dplyr)
library(tidyr)
library(lubridate)
pa_polygon <-
read_sf("../../datalake/mapme.protectedareas/input/wdpa_kfw/wdpa_kfw_spatial_latinamerica_2021-04-22_allPAs_valid.gpkg")
pa_polygon <- st_transform(
pa_polygon,
"+proj=longlat +datum=WGS84 +no_defs"
)
compute_temp <- function(yyyy, mm, pa_polygon) {
tryCatch(
{
# load raster
rast <-
rast(paste0("../../datalake/mapme.protectedareas/input/temperature/tmax/wc2.1_2.5m_tmax_",yyyy,"-",mm,".tif"))
# compute mean value
value <- exact_extract(
rast,
pa_polygon,
"mean"
)
# store in a data frame
df.zstats <- data.frame(
WDPA_PID = pa_polygon$WDPA_PID,
date = lubridate::make_date(yyyy, mm),
tmax = value
)
write.csv(df.zstats,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmax/archive_allPAs/tmax_",yyyy,"-",mm,".csv"),
row.names = F)
},
error = function(e) {
message("re-check the arguments!")
}
)
}
# test function
compute_temp(2000, "01", pa_polygon)
t1 <- Sys.time()
for (i in 2000:2018) {
for (j in c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) {
compute_temp(i, j, pa_polygon)
}
}
t2 <- Sys.time()
print(t2-t2)
print(t2-t1)
tempdir()
pa_polygon <-
read_sf("../../datalake/mapme.protectedareas/input/wdpa_kfw/wdpa_kfw_spatial_latinamerica_2021-04-22_allPAs_valid.gpkg")
pa_polygon <- st_transform(
pa_polygon,
"+proj=longlat +datum=WGS84 +no_defs"
)
compute_temp <- function(yyyy, mm, pa_polygon) {
tryCatch(
{
# load raster
rast <-
rast(paste0("../../datalake/mapme.protectedareas/input/temperature/tmin/wc2.1_2.5m_tmin_",yyyy,"-",mm,".tif"))
# compute mean value
value <- exact_extract(
rast,
pa_polygon,
"mean"
)
# store in a data frame
df.zstats <- data.frame(
WDPA_PID = pa_polygon$WDPA_PID,
date = lubridate::make_date(yyyy, mm),
tmin = value
)
write.csv(df.zstats,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/archive_allPAs/tmin_",yyyy,"-",mm,".csv"),
row.names = F)
},
error = function(e) {
message("re-check the arguments!")
}
)
}
# test function
compute_temp(2000, "01", pa_polygon)
compute_temp <- function(yyyy, mm, pa_polygon) {
tryCatch(
{
# load raster
rast <-
rast(paste0("../../datalake/mapme.protectedareas/input/temperature/tmin/wc2.1_2.5m_tmin_",yyyy,"-",mm,".tif"))
# compute mean value
value <- exact_extract(
rast,
pa_polygon,
"mean"
)
# store in a data frame
df.zstats <- data.frame(
WDPA_PID = pa_polygon$WDPA_PID,
date = lubridate::make_date(yyyy, mm),
tmin = value
)
write.csv(df.zstats,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/archive_allPAs/tmin_",yyyy,"-",mm,".csv"),
row.names = F)
},
error = function(e) {
message("re-check the arguments!")
}
)
}
t1 <- Sys.time()
for (i in 2000:2018) {
for (j in c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) {
compute_temp(i, j, pa_polygon)
}
}
t2 <- Sys.time()
print(t2-t1)
library(vroom)
setwd("/datadrive/datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmax/archive_allPAs")
# get all the csv files
tmax <-
fs::dir_ls(glob = "*csv")
# bind all CSVs
data.max <-
vroom::vroom(tmax, delim = ",")
setwd("~/shared/Om/mapme.protectedareas")
write.csv(data.max,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmax/tmax_allPAs_long.csv"),
row.names = F)
setwd("/datadrive/datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/archive_allPAs")
# get all the csv files
tmin <-
fs::dir_ls(glob = "*csv")
# bind all CSVs
data.min <-
vroom::vroom(tmin, delim = ",")
setwd("~/shared/Om/mapme.protectedareas")
write.csv(data.min,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/tmin_allPAs_long.csv"),
row.names = F)
tmin <- read.csv("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/tmin_allPAs.csv")
tmin <- read.csv("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmin/tmin_allPAs.csv")
tmax <- read.csv("../../datalake/mapme.protectedareas/output/polygon/temperature/2000-2018_tmax/tmax_allPAs.csv")
head(tmin)
head(tmax)
new.df <- data.frame(WDPA_PID = tmin$WDPA_PID,
date = tmin$date,
tmin = tmin$tmin,
tmax = tmax$tmax)
head(new.df)
new.df$tmean <- (tmin$tmin + tmax$tmax)/2
head(new.df)
write.csv(new.df,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/tmax_tmin_tmean_allPAs.csv"),
row.names = F)
new.df$tmin <- NULL
new.df$tmax <- NULL
head(new.df)
longdf <- pivot_longer(new.df,
cols=tmean)
head(longdf)
write.csv(longdf,
paste0("../../datalake/mapme.protectedareas/output/polygon/temperature/tmean_allPAs_long.csv"),
row.names = F)
library(sf)
library(terra)
library(exactextractr)
library(dplyr)
library(tidyr)
library(lubridate)
pa_polygon <-
read_sf("../../datalake/mapme.protectedareas/input/wdpa_kfw/wdpa_kfw_spatial_latinamerica_2021-04-22_allPAs_valid.gpkg")
pa_polygon <- st_transform(
pa_polygon,
"+proj=longlat +datum=WGS84 +no_defs"
)
compute_precip <- function(yyyy, mm, pa_polygon) {
tryCatch(
{
# load raster
rast <-
rast(paste0("../../datalake/mapme.protectedareas/input/precipitation/wc2.1_2.5m_prec_",yyyy,"-",mm,".tif"))
# compute mean value
value <- exact_extract(
rast,
pa_polygon,
"mean"
)
# store in a data frame
df.zstats <- data.frame(
WDPA_PID = pa_polygon$WDPA_PID,
date = lubridate::make_date(yyyy, mm),
mean_precipitation = value
)
# pivot to long format
zstats_long <- tidyr::pivot_longer(df.zstats,
cols = mean_precipitation
)
write.csv(zstats_long,
paste0("../../datalake/mapme.protectedareas/output/polygon/precipitation/archive_allPAs/precipitation_",yyyy,"-",mm,".csv"),
row.names = F)
},
error = function(e) {
message("re-check the arguments!")
}
)
}
# test function
compute_precip(2000, "01", pa_polygon)
# run for all other years
for (i in 2000:2018) {
for (j in c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) {
compute_precip(i, j, pa_polygon)
}
}
library(vroom)
setwd("/datadrive/datalake/mapme.protectedareas/output/polygon/precipitation/archive_supportedPAs")
# get all the csv files
prec <-
fs::dir_ls(glob = "*csv")
# bind all CSVs
data <-
vroom::vroom(prec, delim = ",")
head(data)
write.csv(data,
paste0("../2000-2018/precipitation_supportedPAs.csv"),
row.names = F)
setwd("~/shared/Om/mapme.protectedareas")
setwd("/datadrive/datalake/mapme.protectedareas/output/polygon/precipitation/archive_allPAs")
# get all the csv files
prec <-
fs::dir_ls(glob = "*csv")
# bind all CSVs
data <-
vroom::vroom(prec, delim = ",")
head(data)
write.csv(data,
paste0("../2000-2018/precipitation_allPAs.csv"),
row.names = F)
df <- data.frame(indicators = "population count",
resources = "global_mosaic",
res_value = "rasters",
arguments = "time frame",
arg_value = c(2000:2020))
View(df)
View(df)
indicators = list(
"population_count" = list(
"resources" = list(
"global_mosaic" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020)
)
)
)
View(indicators)
# treecover
indicators = list(
"treecover" = list(
"resources" = list(
"umd_tree_cover_density_2000" = "raster",
"umd_tree_cover_lossyear" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020),
"minDensity" = c(10,15,25,50,75,100),
"minSize" = c(0:Inf)
)
)
)
# treecover
indicators = list(
"treecover" = list(
"resources" = list(
"umd_tree_cover_density_2000" = "raster",
"umd_tree_cover_lossyear" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020),
"minDensity" = c(10,15,25,50,75,100),
"minSize" = c(0:999)
)
)
)
View(indicators)
# treecover
indicators = list(
"treecover" = list(
"resources" = list(
"umd_tree_cover_density_2000" = "raster",
"umd_tree_cover_lossyear" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020),
"minDensity" = c(10,15,25,50,75,100),
"minSize" = c(0:999)
)
)
"population_count" = list(
"resources" = list(
"global_mosaic" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020)
)
)
)
# treecover
indicators = list(
"treecover" = list(
"resources" = list(
"umd_tree_cover_density_2000" = "raster",
"umd_tree_cover_lossyear" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020),
"minDensity" = c(10,15,25,50,75,100),
"minSize" = c(0:999)
)
)
"population_count" = list(
"resources" = list(
"global_mosaic" = "raster"
),
"arguments" = list(
"timeframe" = c(2000:2020)
)
)
)
dat <- readRDS("../test/GFW_metadata.rds")
setwd("~/shared/Om/mapme.protectedareas")
dat <- readRDS("../test/GFW_metadata.rds")
setwd("~/shared/Om/mapme.protectedareas")
dat <- readRDS("../test/GFW_metadata.rds")
dat <- readRDS("../test/biodiv/GFW_metadata.rds")
View(names(dat))
dat
View(dat)
tempdir()
library(sf)
library(terra)
library(dplyr)
# load ex raster
r1 <- rast("../../datalake/mapme.protectedareas/input/copernicus_global_land_cover/2015/W120N40.tif")
plot(r1)
r1[r1 == 0] <- NA
head(r1)
View(r1)
r2 <- rast("../../datalake/mapme.protectedareas/input/copernicus_global_land_cover/2019/W120N40.tif")
r2[r2 == 0] <- NA
head(r2)
head(r1)
r_diff <- r2 - r1
head(r_diff)
plot(r_diff)
library(openRspat)
# load raster
r <- terra::rast(system.file("extdata", "test_lc_rast.tif", package = "openRspat"))
# load polygon
fname <- system.file("shape/nc.shp", package="sf")
sf <- sf::st_read(fname)
# transform sf object to match projection with raster object
sf <- sf::st_transform(sf, "+proj=longlat +datum=WGS84 +no_defs")
# call function
compute_land_cover(rast=r, aoi=sf[1,], year=2015)
plot(r)
r.df <- as.data.frame(r)
View(r.df)
# test example
rcl = matrix(c(1,3,-1,4,4,-2,5,20,-3),ncol=3,byrow=TRUE)
# test example
rcl = matrix(c(1,3,-1,4,4,-2,5,20,-3),ncol=3,byrow=TRUE)
rcl
r = raster(matrix(1:20,1,20))
r = rast(matrix(1:20,1,20))
r
as.matrix(r)
as.matrix(reclassify(r,rcl,right=NA))
as.matrix(classify(r,rcl,right=NA))
## ===============================================================================
# load raster
r <- terra::rast(system.file("extdata", "test_lc_rast.tif", package = "openRspat"))
lc_classes <- data.frame(value = c(0, 20, 30, 40, 50, 60, 70, 80, 90, 100, 111:116, 121:126, 200),
classes = c("empty", "shrubs", "herbaceous_vegetation", "agriculture", "urban_built_up",
"sparse_vegetation", "snow_and_ice", "permanent_water_bodies", "herbaceous_wetland", "moss",
"closed_forest", "closed_forest", "closed_forest", "closed_forest", "closed_forest", "closed_forest",
"open_forest", "open_forest", "open_forest", "open_forest", "open_forest", "open_forest", "open_sea"))
View(lc_classes)
lc_classes
# test example
rcl = matrix(c(0,0,"empty",
20,20,"srubs",
30,30,"herbaceous_vegetation",
40,40,"agriculture",
50,50,"urban_built_up",
60,60,"sparse_vegetation",
70,70,"snow_and_ice",
80,80,"permanent_water_bodies",
90,90,"herbaceous_wetland",
100,100,"moss",
111:116, "closed_forest",
121,126,"open_forest",
200,200,"open_sea")
,ncol=3,byrow=TRUE)
# test example
rcl = matrix(c(0,0,"empty",
20,20,"srubs",
30,30,"herbaceous_vegetation",
40,40,"agriculture",
50,50,"urban_built_up",
60,60,"sparse_vegetation",
70,70,"snow_and_ice",
80,80,"permanent_water_bodies",
90,90,"herbaceous_wetland",
100,100,"moss",
111:116, "closed_forest",
121,126,"open_forest",
200,200,"open_sea"),ncol=3,byrow=TRUE)
# test example
rcl = matrix(c(0,0,"empty",
20,20,"srubs",
30,30,"herbaceous_vegetation",
40,40,"agriculture",
50,50,"urban_built_up",
60,60,"sparse_vegetation",
70,70,"snow_and_ice",
80,80,"permanent_water_bodies",
90,90,"herbaceous_wetland",
100,100,"moss",
111:116,"closed_forest",
121,126,"open_forest",
200,200,"open_sea"),ncol=3,byrow=TRUE)
# test example
rcl = matrix(c(0,0,"empty",
20,20,"srubs",
30,30,"herbaceous_vegetation",
40,40,"agriculture",
50,50,"urban_built_up",
60,60,"sparse_vegetation",
70,70,"snow_and_ice",
80,80,"permanent_water_bodies",
90,90,"herbaceous_wetland",
100,100,"moss",
111,116,"closed_forest",
121,126,"open_forest",
200,200,"open_sea"),ncol=3,byrow=TRUE)
View(rcl)
## ===============================================================================
# load raster
r <- terra::rast(system.file("extdata", "test_lc_rast.tif", package = "openRspat"))
# r = rast(matrix(1:20,1,20))
as.matrix(r)
as.matrix(classify(r,rcl,right=NA))
lc_classes <- data.frame(value = c(0, 20, 30, 40, 50, 60, 70, 80, 90, 100, 111:116, 121:126, 200),
classes = c("empty", "shrubs", "herbaceous_vegetation", "agriculture", "urban_built_up",
"sparse_vegetation", "snow_and_ice", "permanent_water_bodies", "herbaceous_wetland", "moss",
"closed_forest", "closed_forest", "closed_forest", "closed_forest", "closed_forest", "closed_forest",
"open_forest", "open_forest", "open_forest", "open_forest", "open_forest", "open_forest", "open_sea"),
assigned = c(0,1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,11,11,11,11,11,11,12))
View(lc_classes)
# test example
rcl = matrix(c(0,0,0,
20,20,1,
30,30,2,
40,40,3,
50,50,4,
60,60,5,
70,70,6,
80,80,7,
90,90,8,
100,100,9,
111,116,10,
121,126,11,
200,200,12),ncol=3,byrow=TRUE)
# r = rast(matrix(1:20,1,20))
t <- as.matrix(r)
View(t)
c <- as.matrix(classify(r,rcl,right=NA))
View(c)
length(unique(c))
length(unique(r))
length(unique(r$`2015_W100N40`))
